/**
 * User API
 * OpenAPI Specification for the Apigee user api service endpoint.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 */


package io.swagger.server.api

import io.swagger.server.model.Add
import io.swagger.server.model.Changepassword-form
import io.swagger.server.model.Login
import io.swagger.server.model.Sign-up
import io.swagger.server.model.Update
import io.swagger.server.model.Update-profile

import java.io.File

import org.scalatra.ScalatraServlet
import org.scalatra.swagger._
import org.json4s._
import org.json4s.JsonDSL._
import org.scalatra.json.{ JValueResult, JacksonJsonSupport }
import org.scalatra.servlet.{ FileUploadSupport, MultipartConfig, SizeConstraintExceededException }

import scala.collection.JavaConverters._

class DefaultApi(implicit val swagger: Swagger) extends ScalatraServlet
  with FileUploadSupport
  with JacksonJsonSupport
  with SwaggerSupport {
  protected implicit val jsonFormats: Formats = DefaultFormats

  protected val applicationDescription: String = "DefaultApi"

  before() {
    contentType = formats("json")
    response.headers += ("Access-Control-Allow-Origin" -> "*")
  }
  

  val activateGetOperation = (apiOperation[Unit]("activateGet")
      summary "Activate single as well as multiple users"
      parameters(headerParam[String]("authorization").description(""), queryParam[String]("ids").description(""))
  )

  get("/activate",operation(activateGetOperation)) {
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
    
    
                val ids = params.getAs[String]("ids")

    println("ids: " + ids)
  }

  

  val allrolesGetOperation = (apiOperation[Unit]("allrolesGet")
      summary "Get all roles"
      parameters(headerParam[String]("authorization").description(""))
  )

  get("/allroles",operation(allrolesGetOperation)) {
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
  }

  

  val changepasswordPostOperation = (apiOperation[Unit]("changepasswordPost")
      summary "Change user password"
      parameters(bodyParam[Changepassword-form]("body").description(""), headerParam[String]("authorization").description(""))
  )

  post("/changepassword",operation(changepasswordPostOperation)) {
    
    
          val body = parsedBody.extract[Changepassword-form]

    println("body: " + body)
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
  }

  

  val createPostOperation = (apiOperation[Unit]("createPost")
      summary "Create an account"
      parameters(bodyParam[Sign-up]("body").description(""))
  )

  post("/create",operation(createPostOperation)) {
    
    
          val body = parsedBody.extract[Sign-up]

    println("body: " + body)
  }

  

  val emailexistGetOperation = (apiOperation[Unit]("emailexistGet")
      summary "Check email already exists or not"
      parameters(queryParam[String]("email").description(""))
  )

  get("/emailexist",operation(emailexistGetOperation)) {
    
    
                val email = params.getAs[String]("email")

    println("email: " + email)
  }

  

  val loginPostOperation = (apiOperation[Unit]("loginPost")
      summary "Login to account"
      parameters(bodyParam[Login]("body").description(""))
  )

  post("/login",operation(loginPostOperation)) {
    
    
          val body = parsedBody.extract[Login]

    println("body: " + body)
  }

  

  val profileGetOperation = (apiOperation[Unit]("profileGet")
      summary "Get user profile"
      parameters(headerParam[String]("authorization").description(""))
  )

  get("/profile",operation(profileGetOperation)) {
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
  }

  

  val removeGetOperation = (apiOperation[Unit]("removeGet")
      summary "Inactivate single as well as multiple user"
      parameters(headerParam[String]("authorization").description(""), queryParam[String]("ids").description(""))
  )

  get("/remove",operation(removeGetOperation)) {
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
    
    
                val ids = params.getAs[String]("ids")

    println("ids: " + ids)
  }

  

  val signoutGetOperation = (apiOperation[Unit]("signoutGet")
      summary "Sign out from the account"
      parameters(headerParam[String]("authorization").description(""))
  )

  get("/signout",operation(signoutGetOperation)) {
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
  }

  

  val sumPostOperation = (apiOperation[Unit]("sumPost")
      summary "Sum of two numbers"
      parameters(bodyParam[Add]("body").description(""), headerParam[String]("authorization").description(""))
  )

  post("/sum",operation(sumPostOperation)) {
    
    
          val body = parsedBody.extract[Add]

    println("body: " + body)
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
  }

  

  val updatePostOperation = (apiOperation[Unit]("updatePost")
      summary "Update user role, name status and organization."
      parameters(headerParam[String]("authorization").description(""), bodyParam[Update]("body").description(""))
  )

  post("/update",operation(updatePostOperation)) {
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
    
    
          val body = parsedBody.extract[Update]

    println("body: " + body)
  }

  

  val updateprofilePostOperation = (apiOperation[Unit]("updateprofilePost")
      summary "Update user profile"
      parameters(bodyParam[Update-profile]("body").description(""), headerParam[String]("authorization").description(""))
  )

  post("/updateprofile",operation(updateprofilePostOperation)) {
    
    
          val body = parsedBody.extract[Update-profile]

    println("body: " + body)
    
    
          val authorization = request.getHeader("authorization")

    println("authorization: " + authorization)
  }

}
